import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import xarray as xr



def add_distance_to_coast(floatsDF, result_interpDF):
    """
    function for adding the 'distance to coast' to the dataframe. 
    ----------
    input: 
    floatsDF -- pandas.dataframe of floats data
    result_interpDF -- xarray.dataset of 'distance' generated by interpolation routines

    output: 
    dframe_out -- one columns added {dist}
    """
    #print("\n ******* Adding the 'distance to coast' ******* \n")
    ###### make the interpolation dataset as a dataframe
    tmpdf_interpolate = result_interpDF.to_dataframe().dropna()  # dropna along 'dist'
    print('shape of the interpolation dateframe', tmpdf_interpolate.shape)
    print(tmpdf_interpolate[:20])

    # merge(left) floatsDFAll_9Dtimeorder and interpolation dateframe
    combined_df_interpolate = pd.merge(floatsDF, tmpdf_interpolate, on=['id', 'lat', 'lon', 'time'], how='left')

    # check
    print('\n shape (before adding the interpolated chlor_a)', floatsDF.shape)
    print('shape (after added the interpolated chlor_a)\n', combined_df_interpolate.shape)
    check1 = combined_df_interpolate[~np.isnan(combined_df_interpolate.dist)]
    print("comparison of the 'time and id' sorted, non-nan, 'distance to coast' values \n",
          check1.sort_values(['time', 'id'], ascending=True).dist[:20])

    return combined_df_interpolate



def spatial_plots_distance(dfDistance):
    """
    function for spatial plots of 'distance to coast'
    input:
    dfDistance -- pandas.dataframe contains relevant features to chlor_a, chlor_a_log_e chl_rate, chl_log_e_rate, distance

    output:
    None
    """

    fig, ax  = plt.subplots(figsize=(12,10))
    dfDistance.plot(kind='scatter', x='lon', y='lat', c='dist', cmap='RdBu_r',  edgecolor='none', ax=ax)
    plt.show()

    return 0